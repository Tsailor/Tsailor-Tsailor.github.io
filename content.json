[{"title":"Git分支管理","slug":"Git分支管理","date":"2020-07-22T16:00:00.000Z","updated":"2020-07-23T04:06:45.216Z","comments":true,"path":"2020/07/23/Git分支管理/","link":"","permalink":"http://yoursite.com/2020/07/23/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/","excerpt":"","text":"1、git创建本地分支：git branch [name]2、git删除本地分支：git branch -d [name]3、git切换分支：git checkout [name]4、git创建并切换到新的本地分支：git checkout -b [name]5、git查看所有分支信息：git branch -a 123*master :本地分支， * 当前所在分支 hexo ：本地hexo分支 remotes&#x2F;origin&#x2F;hexo ： 远程分支 6、git创建远程分支：git push origin [name] (将本地新建的分支推送到远程)7、git删除远程分支：git push origin --delete [name]8、本地分支与远程分支建立关联：git branch --set-upstream-to remotes/origin/hexo 实例：将本地hexo分支的内容推送到远程hexo分支1、新建并切换到本地hexo分支 ：git branch hexo2、将本地分支推送到远程分支：git push origin hexo3、本地分支与远程分支关联： git branch --set-upstream-to remotes/origin/hexo4、本地代码提交到版本库：git add . git commit -m &quot;message&quot;5、拉取远程分支内容：git pull origin hexo6、本地代码提交到远程分支：git push origin hexo","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"webpack创建React开发环境","slug":"webpack创建React开发环境","date":"2020-07-22T15:12:59.323Z","updated":"2020-07-23T04:05:42.853Z","comments":true,"path":"2020/07/22/webpack创建React开发环境/","link":"","permalink":"http://yoursite.com/2020/07/22/webpack%E5%88%9B%E5%BB%BAReact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"总结各功能具体实现过程见readMe.md 1 webpack搭建react项目以前总是使用脚手架工具直接创建，今天试试webpack手动创建react 项目 1、 新建src 文件夹存放react代码 mkdir src2、 初始化项目 npm init -y3、 安装webpack npm i webpack webpack-cli -devwebpack和babel在打包的时候不会包括到源码里，所以是 - div系统提示说：”-dev”已经不推荐使用了，使用 “–only=dev”代替webpack-cli 包含了许多webpack的指令。4、 安装babel install @babel/core babel-loader @babel/preset-env @babel/preset-react --only123456@babel&#x2F;core 这是babel的核心库 @babel&#x2F;preset-env 将es6编译成es5 @babel&#x2F;preset-react 识别JSX语法babel-loader 将经过babel处理后的文件输出成浏览器可以识别的格式 5、 配置babel，根目录下新建.babelrc文件 写入 { “presets”: [“@babel/preset-env”, “@babel/preset-react”]} 12345678910111213141516171819202122232425266、 配置webpack, 新建 &#96;&#96;&#96;webpack.config.js &#96;&#96;&#96; &#96;&#96;&#96;javascriptconst path &#x3D; require(&#39;path&#39;); &#x2F;&#x2F;引入路径module.exports &#x3D; &#123; &#x2F;&#x2F; 导出 entry: &#39;.&#x2F;src&#x2F;main.js&#39;, &#x2F;&#x2F; 项目入口 output: &#123; &#x2F;&#x2F; 输出 filename: &#39;bundle.js&#39;, &#x2F;&#x2F; 打包后的名字 path: path.resolve(__dirname, &#39;dist&#39;) &#x2F;&#x2F; 当前路径下 &#125;, module: &#123; rules: [ &#123; test: &#x2F;\\.js$&#x2F;, &#x2F;&#x2F; 打包 .js文件 exclude: &#x2F;node_modules&#x2F;, use: &#123; loader: &quot;babel-loader&quot; &#x2F;&#x2F; 使用 babel-loader &#125; &#125; ] &#125; &#125;; &#96;&#96;&#96; 7、解析HTML文件，webpack的默认配置只能解析.js文件。安装&#96;&#96;&#96; html-webpack-plugin&#96;&#96;&#96; &#96;&#96;&#96;javascriptnpm i html-webpack-plugin --only&#x3D;dev 再配置插件 1234567const HtmlWebpackPlugin = require('html-webpack-plugin') // 引入plugins: [ new HtmlWebpackPlugin(&#123; title: 'load-files', template: 'index.html' // 模板 &#125;)] 8、安装react、react-domnpm install react react-dom --save9、 安装，启动webpack-dev-server npm install webpack-dev-server --save-dev package.json中，scripts标签里加入 \"start:dev\": \"webpack-dev-server\" 10、执行npm run start:dev11、打包命令，npx webpack12、 配置解析css的loader ,npm install --save-dev css-loader style-loader顺序先下后上 [ { loader: 'style-loader' }, // 将style插入到模板里 { loader: 'css-loader', // 解析css options: { modules: true } } ] 13、抽离css样式到独立的文件javascript npm install --save-dev mini-css-extract-plugin 配置参照npm文档","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-07-22T15:12:59.323Z","updated":"2020-07-22T15:12:59.323Z","comments":true,"path":"2020/07/22/hello-world/","link":"","permalink":"http://yoursite.com/2020/07/22/hello-world/","excerpt":"","text":"以前的blog不慎丢失了，从今开始，记录学习过程","categories":[],"tags":[]}]